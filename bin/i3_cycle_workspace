#!/usr/bin/env perl

use v5.10;
use strict;
use warnings;
use JSON qw[ decode_json ];
use List::Util qw[ min max ];
use Data::Dumper;

use constant {
    MIN_WS_NUMBER => 1,
    MAX_WS_NUMBER => 20,
};

sub execute_command {
    my ($cmd) = @_;

    say $cmd;

    my $result = `$cmd`;
    return $result;
}

my $workspaces = decode_json(`i3-msg -tget_workspaces`);

my $args = {
    direction => 'right',
    move_window => 0,
    sequential => 0,
};

for my $argv (@ARGV) {
    if ($argv eq 'left') {
        $args->{direction} = 'left';
    }
    if ($argv eq 'move_window') {
        $args->{move_window} = 1;
    }
    if ($argv eq 'sequential') {
        $args->{sequential} = 1;
    }
}

say Dumper({ args => $args });

my %workspaces_before;
my %workspaces_after;
my $focused_workspace;

for my $workspace (@{ $workspaces }) {
    my $output = $workspace->{output};
    my $workspace_data = {
        num => $workspace->{num},
        name => $workspace->{name},
        output => $workspace->{output},
    };
    if ($workspace->{focused}) {
        $focused_workspace = $workspace_data;
        say Dumper({ focused_workspace => $focused_workspace })
    } else {
        if ($focused_workspace) {
            push @{ $workspaces_after{$output} }, $workspace_data;
        } else {
            push @{ $workspaces_before{$output} }, $workspace_data;
        }
    }
}

my $workspaces_before_output = $workspaces_before{ $focused_workspace->{output} };
my $workspaces_after_output  = $workspaces_after{ $focused_workspace->{output} };


my $jump_to_workspace;
if ($args->{sequential}) {
    my $workspace_number;
    if ($args->{direction} eq 'left') {
        say "sequential left";
        $workspace_number = max(MIN_WS_NUMBER, $focused_workspace->{num} - 1);
    } else {
        say "sequential right";
        $workspace_number = min(MAX_WS_NUMBER, $focused_workspace->{num} + 1);
    }

    say "workspace_number:$workspace_number";

    my ($workspace) = grep { $_->{num} == $workspace_number } @{ $workspaces };

    $jump_to_workspace = {
        num    => $workspace->{num}    // $workspace_number,
        name   => $workspace->{name}   // $workspace_number,
        output => $workspace->{output} // $focused_workspace->{output},
    };
} else {
    if ($args->{direction} eq 'left') {
        if (@{ $workspaces_before_output || [] }) {
            $jump_to_workspace = $workspaces_before_output->[-1];
        } elsif (@{ $workspaces_after_output || [] }) {
            $jump_to_workspace = $workspaces_after_output->[-1];
        }
    } else {
        if (@{ $workspaces_after_output || [] }) {
            $jump_to_workspace = $workspaces_after_output->[0];
        } elsif (@{ $workspaces_before_output || [] }) {
            $jump_to_workspace = $workspaces_before_output->[0];
        }
    }
}

if ($jump_to_workspace && $jump_to_workspace->{num} != $focused_workspace->{num}) {
    say Dumper({ jump_to_workspace => $jump_to_workspace });

    if ($jump_to_workspace->{num} eq $jump_to_workspace->{name}) {
        my $workspace_name = `grep 'set \$ws$jump_to_workspace->{num}' ~/.config/i3/config`;
        if ($workspace_name && $workspace_name =~ /"(.*)"/) {
            $jump_to_workspace->{name} = $1;
        }
    }

    if ($args->{move_window}) {
        execute_command("i3-msg -tcommand 'move window to workspace $jump_to_workspace->{name}'");
    }
    execute_command("i3-msg -tcommand 'workspace $jump_to_workspace->{name}'");
}
