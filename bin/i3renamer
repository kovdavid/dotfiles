#!/usr/bin/env python

import os
import re
import signal
import sys
import time
from collections import defaultdict
from datetime import datetime
from i3ipc import Connection, Event
from pprint import pprint

WINDOW_TITLE_REGEXP_IDEA = re.compile("^([^\[]+) \[")
SCRATCHPAD_WORKSPACE_NUM = -1

def log(msg: str):
    now = datetime.now()
    print(f"{now} {msg}")


class i3Renamer:
    """Daemon for renaming workspaces based on the first window"""

    def __init__(self, i3) -> None:
        # Keep track where each window is
        self.window_to_workspace_id: dict[int, int] = dict()
        self.last_seen_scratchpad_output: dict[int, str] = dict()

        self._init_tree(i3)

        i3.on(Event.WINDOW_NEW, self.on_window_new)
        i3.on(Event.WINDOW_CLOSE, self.on_window_close)
        i3.on(Event.WINDOW_MOVE, self.on_window_move)
        i3.on(Event.WINDOW_TITLE, self.on_window_title)
        i3.on(Event.WORKSPACE_EMPTY, self.on_workspace_empty)

    def print_internal_state(self, signal, frame):
        log("window_to_workspace_id:")
        for window_id, workspace_num in self.window_to_workspace_id.items():
            log(f"\twindow_id:{window_id} workspace_num:{workspace_num}")
        log("last_seen_scratchpad_output:")
        for window_id, output in self.last_seen_scratchpad_output.items():
            log(f"\twindow_id:{window_id} output:{output}")

    def _init_tree(self, i3):
        tree = i3.get_tree()

        workspaces = []

        nodes = [tree]
        for node in nodes:
            if node.num:
                workspaces.append(node)
            else:
                nodes.extend(node.nodes)
                nodes.extend(node.floating_nodes)

        for workspace in workspaces:
            workspace_number = workspace.num

            log(f"Initializing workspace {workspace_number}")

            for window in workspace.nodes + workspace.floating_nodes:
                self.register_window_to_workspace(window.ipc_data, workspace_number)

            self.rename_workspace(i3, workspace_number)

    def get_window_name(self, workspace_number, window_properties) -> str:
        window_name: str = window_properties.get("class", "")
        window_title: str = window_properties.get("title", "")

        if window_name == "jetbrains-pycharm":
            window_name = "pycharm"
        elif window_name == "jetbrains-idea-ce":
            window_name = ""
            if m := WINDOW_TITLE_REGEXP_IDEA.match(window_title):
                window_name += f" {m.group(1)}"
        elif window_name == "Slack":
            window_name = ""
        elif window_name == "Alacritty":
            window_name = ""
        elif window_name == "firefox":
            window_name = ""
        elif window_name == "Thunar":
            window_name = ""
        elif window_name == "qBittorrent":
            window_name = " qB"
        elif window_name == "vlc":
            window_name = ""
        elif window_name == "Zathura":
            window_name = ""
        elif window_name == "Galculator":
            window_name = ""
        elif window_name == "beekeeper-studio":
            window_name = " SQL"

        return window_name

    def run_command(self, i3, command):
        time.sleep(0.1) # There is a race between window movement and workspace renaming
        log(f"Running command: {command}")
        i3.command(command)

    def register_window_to_workspace(self, window, workspace_number):
        window_id = window['id']

        if not window.get('window_properties'):
            log(f"Window {window_id} without window_properties")
            for window in window['nodes'] + window['floating_nodes']:
                self.register_window_to_workspace(window, workspace_number)
            return

        log(f"Registering window {window_id} on workspace {workspace_number}")

        self.window_to_workspace_id[window_id] = workspace_number

    def unregister_window_from_workspace(self, window, workspace_number):
        window_id = window['id']

        if not window.get('window_properties'):
            log(f"Window {window_id} without window_properties")
            for window in window['nodes'] + window['floating_nodes']:
                self.unregister_window_from_workspace(window, workspace_number)
            return

        log(f"Unregistering window {window_id} on workspace {workspace_number}")

        self.window_to_workspace_id.pop(window_id, None)

    def rename_workspace(self, i3, workspace_number):
        """Rename workspace based on the first window"""
        if type(workspace_number) == int:
            if workspace_number == SCRATCHPAD_WORKSPACE_NUM:
                return # Don't rename scratchpad

            workspaces = i3.get_tree().workspaces()
            for ws in workspaces:
                if ws.num == workspace_number:
                    workspace = ws
                    break
            else:
                return
        else:
            workspace = workspace_number  # already a tree

        if not len(workspace.leaves()):
            workspace_name = f"{workspace.num}"
        else:
            window_properties = workspace.leaves()[0].ipc_data["window_properties"]

            window_name = self.get_window_name(workspace.num, window_properties)
            workspace_name = f"{workspace.num}: {window_name}"

        if workspace.name != workspace_name:
            self.run_command(
                i3,
                'rename workspace "%s" to "%s"' % (workspace.name, workspace_name),
            )

    def on_window_new(self, i3, event):
        """Rename the workspace if the new window is the first one"""
        workspace = i3.get_tree().find_focused().workspace()
        workspace_number: int = workspace.num
        container = event.ipc_data.get("container")
        window_id: int = container.get("id")

        log(f"on_window_new workspace:{workspace_number} window:{window_id}")

        self.rename_workspace(i3, workspace)

        self.register_window_to_workspace(container, workspace_number)

    def on_window_close(self, i3, event):
        """Rename the workspace if the new window was the last one"""
        workspace = i3.get_tree().find_focused().workspace()
        workspace_number: int = workspace.num
        container = event.ipc_data.get("container")
        window_id: int = container.get("id")

        self.unregister_window_from_workspace(container, workspace_number)
        self.last_seen_scratchpad_output.pop(window_id, None)

        log(f"on_window_close workspace:{workspace_number} window:{window_id}")

        self.rename_workspace(i3, workspace)

    def on_window_move(self, i3, event):
        """Trigger rename on the old and the new workspace as well"""
        self._do_on_window_move(i3, event.ipc_data.get("container"))

    def _do_on_window_move(self, i3, container):
        window_id: int = container.get("id")

        if not container.get('window_properties'):
            log(f"Window {window_id} without window_properties")
            for window in container['nodes'] + container['floating_nodes']:
                self._do_on_window_move(i3, window)
            return

        con = i3.get_tree().find_by_id(window_id)
        while con.type != "workspace" and con.parent:
            con = con.parent

        old_workspace_number = self.window_to_workspace_id[window_id]
        new_workspace_number = con.num

        log(f"on_window_move id {window_id} from {old_workspace_number} to {new_workspace_number}")

        if old_workspace_number == SCRATCHPAD_WORKSPACE_NUM:
            output_name = container.get("output")
            i3_outputs = i3.get_outputs()

            last_seen_output = self.last_seen_scratchpad_output.get(window_id, "")

            if output_name != last_seen_output:
                self.last_seen_scratchpad_output[window_id] = output_name

                for output in filter(lambda o: o.name == output_name, i3_outputs):
                    width = int(output.rect.width * 0.95)
                    height = int(output.rect.height * 0.95)

                    log(f"Resizing scratchpad window {window_id} on output {output_name} - last seen on {last_seen_output}")

                    i3.command(f"border pixel 10")
                    i3.command(f"resize set width {width} px")
                    i3.command(f"resize set height {height} px")
                    i3.command(f"move position center")

        self.rename_workspace(i3, old_workspace_number)
        self.rename_workspace(i3, new_workspace_number)

        self.unregister_window_from_workspace(container, old_workspace_number)
        self.register_window_to_workspace(container, new_workspace_number)

    def on_workspace_empty(self, i3, event):
        """Reset the workspace name"""
        workspace = event.ipc_data.get("current")
        workspace_number: int = workspace["num"]

        log(f"on_workspace_empty workspace:{workspace_number} {workspace['name']}")

        self.rename_workspace(i3, workspace_number)

    def on_window_title(self, i3, event):
        """Update the name of the workspace if necessary"""
        container = event.ipc_data.get("container")
        window_id: int = container.get("id")

        con = i3.get_tree().find_by_id(window_id)
        while con.type != "workspace" and con.parent:
            con = con.parent

        workspace_number = con.num

        self.rename_workspace(i3, workspace_number)


def run():
    print("                                                    ")
    print(" _ ____  _____                                      ")
    print("(_)___ \|  __ \                                     ")
    print(" _  __) | |__) |___ _ __   __ _ _ __ ___   ___ _ __ ")
    print("| ||__ <|  _  // _ \ '_ \ / _` | '_ ` _ \ / _ \ '__|")
    print("| |___) | | \ \  __/ | | | (_| | | | | | |  __/ |   ")
    print("|_|____/|_|  \_\___|_| |_|\__,_|_| |_| |_|\___|_|   ")
    print("                                                    ")

    log("Creating i3 connection")
    i3 = Connection()

    log("Creating i3Renamer instance")
    instance = i3Renamer(i3)

    signal.signal(signal.SIGHUP, instance.print_internal_state)

    log("Running main loop")
    i3.main()

    log("Exiting main loop")
    sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) > 1:
        arg = sys.argv[1]
        if arg in ["status", "stop", "start", "restart", "mask", "unmask"]:
            os.system(f"systemctl --user {arg} i3renamer")
    else:
        run()

