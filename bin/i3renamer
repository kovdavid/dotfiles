#!/usr/bin/env python

from collections import defaultdict
import re
import logging
from i3ipc import Connection, Event

WINDOW_TITLE_REGEXP_IDEA = re.compile("^([^\[]+) \[")

class i3Renamer:
    """Daemon for renaming workspaces based on the first window"""
    def __init__(self, i3) -> None:
        # Keep track where each window is
        self.workspace_to_window_ids: dict[int, set[int]] = defaultdict(set)
        self.window_to_workspace_id: dict[int, int] = dict()

        self._init_tree(i3)

        i3.on(Event.WINDOW_NEW, self.on_window_new)
        i3.on(Event.WINDOW_CLOSE, self.on_window_close)
        i3.on(Event.WINDOW_MOVE, self.on_window_move)
        i3.on(Event.WINDOW_TITLE, self.on_window_title)
        i3.on(Event.WORKSPACE_EMPTY, self.on_workspace_empty)

    def _init_tree(self, i3):
        tree = i3.get_tree()

        workspaces = []

        nodes = [tree]
        for node in nodes:
            if node.num and node.num > 0:
                workspaces.append(node)
            else:
                nodes.extend(node.nodes)
                nodes.extend(node.floating_nodes)

        for workspace in workspaces:
            workspace_number = workspace.num

            for window in workspace.nodes + workspace.floating_nodes:
                self.register_window_to_workspace(window.id, workspace_number)

            self.rename_workspace(i3, workspace_number)

    def get_window_name(self, workspace_number, window_properties) -> str:
        window_name: str = window_properties["class"]
        window_title: str = window_properties["title"]

        if window_name == "jetbrains-pycharm":
            window_name = "pycharm"
        elif window_name == "jetbrains-idea-ce":
            window_name = ""
            if m := WINDOW_TITLE_REGEXP_IDEA.match(window_title):
                window_name += f" {m.group(1)}"
        elif window_name == "Slack":
            window_name = ""
        elif window_name == "Alacritty":
            window_name = ""
        elif window_name == "firefox":
            window_name = ""
        elif window_name == "Thunar":
            window_name = ""

        return window_name

    def run_command(self, i3, command):
        import time

        time.sleep(0.1) # There is a race between window movement and workspace renaming
        print(f"Running command: {command}")
        i3.command(command)

    def register_window_to_workspace(self, window_id, workspace_number):
        self.workspace_to_window_ids[workspace_number].add(window_id)
        self.window_to_workspace_id[window_id] = workspace_number

    def unregister_window_from_workspace(self, window_id, workspace_number):
        self.workspace_to_window_ids[workspace_number].discard(window_id)
        if not self.workspace_to_window_ids[workspace_number]:
            del self.workspace_to_window_ids[workspace_number]
        del self.window_to_workspace_id[window_id]

    def rename_workspace(self, i3, workspace_number):
        """Rename workspace based on the first window"""
        if type(workspace_number) == int:
            workspaces = i3.get_tree().workspaces()
            for ws in workspaces:
                if ws.num == workspace_number:
                    workspace = ws
                    break
            else:
                return
        else:
            workspace = workspace_number  # already a tree

        if not len(workspace.leaves()):
            if workspace.name != f"{workspace_number}":
                self.run_command(
                    i3,
                    'rename workspace "%s" to "%s"' % (workspace.name, workspace.num),
                )
        else:
            window_properties = workspace.leaves()[0].ipc_data["window_properties"]

            window_name = self.get_window_name(workspace.num, window_properties)
            workspace_name = f"{workspace.num}: {window_name}"

            if workspace.name != workspace_name:
                self.run_command(
                    i3,
                    'rename workspace "%s" to "%s"' % (workspace.name, workspace_name),
                )

    def on_window_new(self, i3, event):
        """Rename the workspace if the new window is the first one"""
        workspace = i3.get_tree().find_focused().workspace()
        workspace_number: int = workspace.num
        container = event.ipc_data.get("container")
        window_id: int = container.get("id")

        print(f"on_window_new workspace:{workspace_number} window:{window_id}")

        self.rename_workspace(i3, workspace)

        self.register_window_to_workspace(window_id, workspace_number)

    def on_window_close(self, i3, event):
        """Rename the workspace if the new window was the last one"""
        workspace = i3.get_tree().find_focused().workspace()
        workspace_number: int = workspace.num
        container = event.ipc_data.get("container")
        window_id: int = container.get("id")

        self.unregister_window_from_workspace(window_id, workspace_number)

        print(f"on_window_close workspace:{workspace_number} window:{window_id}")

        self.rename_workspace(i3, workspace)

    def on_window_move(self, i3, event):
        """Trigger rename on the old and the new workspace as well"""
        container = event.ipc_data.get("container")
        window_id: int = container.get("id")

        con = i3.get_tree().find_by_id(window_id)
        while con.type != "workspace" and con.parent:
            con = con.parent

        old_workspace_number = self.window_to_workspace_id[window_id]
        new_workspace_number = con.num

        print(f"on_window_move from {old_workspace_number} to {new_workspace_number}")

        self.rename_workspace(i3, old_workspace_number)
        self.rename_workspace(i3, new_workspace_number)

        self.unregister_window_from_workspace(window_id, old_workspace_number)
        self.register_window_to_workspace(window_id, new_workspace_number)

    def on_workspace_empty(self, i3, event):
        """Reset the workspace name"""
        workspace = event.ipc_data.get("current")
        workspace_number: int = workspace["num"]

        print(f"on_workspace_empty workspace:{workspace_number} {workspace['name']}")

        self.rename_workspace(i3, workspace_number)

    def on_window_title(self, i3, event):
        """Update the name of the workspace if necessary"""
        container = event.ipc_data.get("container")
        window_id: int = container.get("id")

        con = i3.get_tree().find_by_id(window_id)
        while con.type != "workspace" and con.parent:
            con = con.parent

        workspace_number = con.num

        #  print(f"on_window_title workspace:{workspace_number}")

        self.rename_workspace(i3, workspace_number)


if __name__ == "__main__":
    print("Starting i3renamer")

    logging.basicConfig(level=logging.DEBUG)

    i3 = Connection()

    i3Renamer(i3)

    i3.main()
