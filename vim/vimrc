" vimrc by Davs
source ~/.vim/plugins.vim
source ~/.vim/global_settings.vim
source ~/.vim/global_functions.vim
source ~/.vim/global_mappings.vim
source ~/.vim/plugin_settings.vim
" Filetype {{{
" EveryFile {{{
augroup all_file_type
    autocmd!

    autocmd WinEnter,FocusGained,BufEnter * setlocal relativenumber | setlocal number
    autocmd WinLeave,FocusLost,BufLeave * setlocal norelativenumber | setlocal number
    autocmd BufWritePre * %s/\s\+$//e

    autocmd BufEnter * silent execute ":Rooter"

    " Turn off syntax syncing for large files
    autocmd BufEnter * if line2byte(line("$") + 1) > 1000000 | syntax clear | endif

    autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

    autocmd WinEnter,FocusGained,BufEnter * if &diff | setlocal winwidth=1 | setlocal wrap | setlocal nocursorbind | endif
    autocmd WinEnter,FocusGained,BufEnter * if !&diff | setlocal winwidth=1 | endif

    autocmd Syntax * highlight SpecialKey ctermfg=240 gui=bold guifg=#5b605e
    autocmd Syntax * highlight NonText ctermfg=240 gui=bold guifg=#5b605e

    autocmd BufEnter * let &titlestring = $USER."@".hostname().":".expand("%:p")

    autocmd BufRead,BufNewFile *.xml.sample  setfiletype xml
    autocmd BufRead,BufNewFile *.sls setfiletype yaml
augroup END
" }}}
" golang {{{
augroup filetype_golang
    autocmd!
    autocmd FileType go setlocal shiftwidth=4
    autocmd FileType go setlocal tabstop=4
    autocmd FileType go setlocal softtabstop=4

    autocmd BufRead,BufNewFile *.go if line('$') == 1 && getline('.') == '' | call NewGoFile() | endif
    autocmd BufWritePost *.go Neomake

    autocmd FileType go nnoremap <buffer> <leader>dd o<ESC>ifmt.Printf("%+v\n", )<LEFT>
    autocmd FileType go nnoremap <buffer> <leader>de o<ESC>ifmt.Printf("%+v\n")<CR>os.Exit(1)<ESC>:GoImports<CR>k$i,

    autocmd FileType go let g:go_fmt_command = "goimports"
    autocmd FileType go let g:go_def_mode = "gopls"
    autocmd FileType go let g:go_info_mode = "gopls"
    autocmd FileType go let g:go_fmt_autosave = 1
    autocmd FileType go let g:go_fmt_fail_silently = 1

    autocmd FileType go let g:neomake_error_sign   = {'text': '✖', 'texthl': 'NeomakeErrorSign'}
    autocmd FileType go let g:neomake_warning_sign = {'text': '∆', 'texthl': 'NeomakeWarningSign'}
    autocmd FileType go let g:neomake_message_sign = {'text': '➤', 'texthl': 'NeomakeMessageSign'}
    autocmd FileType go let g:neomake_info_sign    = {'text': 'ℹ', 'texthl': 'NeomakeInfoSign'}
    autocmd FileType go let g:neomake_go_enabled_makers = [ 'go' ]

    autocmd FileType go noremap <buffer> <leader>rr :!go run %<CR>
    autocmd FileType go noremap <buffer> <leader>i :GoInfo<CR>
    autocmd FileType go noremap <buffer> <leader>d :GoDef<CR>
    autocmd FileType go noremap <buffer> <leader>b :GoBuild -i<CR>
    autocmd FileType go noremap <buffer> <leader>ts :GoInstall<CR>
    autocmd FileType go noremap <buffer> <leader>gi :GoImports<CR>
    autocmd FileType go noremap <buffer> <leader>tf :GoTestFunc<CR>
    autocmd FileType go noremap <buffer> <leader>ta :GoTest<CR>
    autocmd FileType go noremap <buffer> <leader>aa :GoAlternate<CR>

    autocmd FileType go noremap <buffer> <leader>ger oif err != nil {<CR>return err<CR>}
    autocmd FileType go noremap <buffer> <leader>gel oif err != nil {<CR>log.Fatal(err)<CR>}
    autocmd FileType go noremap <buffer> <leader>get oif err != nil {<CR>t.Fatal(err)<CR>}
    autocmd FileType go noremap <buffer> <leader>gep oif err != nil {<CR>panic("")<CR>}<ESC>k$<LEFT><LEFT>i
augroup END
" }}}
" Perl {{{
augroup filetype_perl
    autocmd!
    autocmd BufRead,BufNewFile *.pm  setfiletype perl
    autocmd BufRead,BufNewFile *.pl  setfiletype perl
    autocmd BufRead,BufNewFile *.t   setfiletype perl

    autocmd BufNewFile *.pl 0r ~/.vim/skeleton/perl.script
    autocmd BufNewFile *.t 0r ~/.vim/skeleton/perl.test

    autocmd BufRead,BufNewFile *.pm if line('$') == 1 && getline('.') == '' | call NewPerlModule() | endif

    autocmd BufRead,BufNewFile *.pm  setlocal filetype=perl
    autocmd BufRead,BufNewFile *.pl  setlocal filetype=perl
    autocmd BufRead,BufNewFile *.t   setlocal filetype=perl

    autocmd FileType perl setlocal iskeyword-=:

    autocmd FileType perl setlocal nowrap

    autocmd FileType perl syn region perlSubFold start="^\z(\s*\)\<subtest\>.*[^};]$" end="^\z1};\s*$" transparent fold keepend
    autocmd FileType perl syn region perlSubFold start="^\z(\s*\)\<txn_subtest\>.*[^};]$" end="^\z1};\s*$" transparent fold keepend
    autocmd FileType perl hi Statement ctermfg=14

    autocmd FileType perl nnoremap <buffer> <leader>dd <ESC>ause v5.10;<CR>use Data::Dumper;<CR>local $Data::Dumper::Sortkeys = 1;<CR>local $Data::Dumper::Terse = 0;<CR>local $Data::Dumper::Indent = 2;<CR>local $Data::Dumper::Maxdepth = 2;<CR>say STDERR Dumper();<CR>exit;<UP><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT>
    autocmd FileType perl nnoremap <buffer> <leader>dt <ESC>ause v5.10;<CR>use Data::Dumper;<CR>local $Data::Dumper::Terse = 1;<CR>local $Data::Dumper::Indent = 0;<CR>local $Data::Dumper::Sortkeys = 1;<CR>local $Data::Dumper::Maxdepth = 2;<CR>say STDERR Dumper();<LEFT><LEFT>
    autocmd FileType perl nnoremap <buffer> <leader>so <ESC>vapk:sort<CR>

    " (?<!\$|@|%|{)
    autocmd FileType perl nnoremap <buffer> <leader>gu  :let @/=expand("<cword>")<CR>:!grep -rP  '<C-R>=expand("<cword>")<CR>' bin/ lib/ t/<CR>
    autocmd FileType perl nnoremap <buffer> <leader>glu :let @/=expand("<cword>")<CR>:!grep -rlP '<C-R>=expand("<cword>")<CR>' bin/ lib/ t/<CR>
    autocmd FileType perl nnoremap <buffer> <leader>gd  :let @/=expand("<cword>")<CR>:!grep -rP  'sub <C-R>=expand("<cword>")<CR>' bin/ lib/ t/<CR>
    autocmd FileType perl nnoremap <buffer> <leader>gld :let @/=expand("<cword>")<CR>:!grep -rlP 'sub <C-R>=expand("<cword>")<CR>' bin/ lib/ t/<CR>
    autocmd FileType perl nnoremap <buffer> <leader>ga  :let @/=expand("<cword>")<CR>:!grep -rP  '<C-R>=expand("<cword>")<CR>' bin/ lib/ t/<CR>
    autocmd FileType perl nnoremap <buffer> <leader>gla :let @/=expand("<cword>")<CR>:!grep -rlP '<C-R>=expand("<cword>")<CR>' bin/ lib/ t/<CR>
    autocmd FileType perl nnoremap <buffer> <leader>gsc :let @/=expand("<cword>")<CR>:!grep -rP  '<C-R>=expand("<cword>")<CR>\(' bin/ lib/ t/<CR>

    autocmd FileType perl nnoremap <buffer> <leader>rr :!perl -Ilib %<CR>

    vnoremap <leader>pt :!perltidy<CR>
    nnoremap <leader>pt :%!perltidy<CR>

    autocmd FileType perl let g:test_runner_single_command = "perl"
    autocmd FileType perl let g:test_runner_multiple_command = "prove"
    autocmd FileType perl let g:test_runner_test_dir = "t"
    autocmd FileType perl let g:test_runner_test_ext = "t"
    autocmd FileType perl let g:test_runner_code_ext = "pm"

    if len($PERL_TEST_FILE_COMMAND) > 0
        autocmd FileType perl let g:perl_test_file_command = $PERL_TEST_FILE_COMMAND
    endif
    if len($TEST_RUNNER_SINGLE_COMMAND) > 0
        autocmd FileType perl let g:test_runner_single_command = $TEST_RUNNER_SINGLE_COMMAND
    endif
    if len($TEST_RUNNER_MULTI_COMMAND) > 0
        autocmd FileType perl let g:test_runner_multiple_command = $TEST_RUNNER_MULTI_COMMAND
    endif

    autocmd FileType perl nnoremap <buffer> <leader>ts  :!perl -Ilib -c %<CR>
    autocmd FileType perl nnoremap <buffer> <leader>tf  :RunSingleTest<CR>
    autocmd FileType perl nnoremap <buffer> <leader>ta  :RunAllTests<CR>
    autocmd FileType perl nnoremap <buffer> <leader>td  :RunTestsInDir<CR>
    autocmd FileType perl nnoremap <buffer> <leader>tc  :CreateTestFile<CR>
    autocmd FileType perl nnoremap <buffer> <leader>to  :OpenTestDir<CR>
    autocmd FileType perl nnoremap <buffer> <leader>mt  :call PerlOpenModule(1)<CR>
    autocmd FileType perl nnoremap <buffer> <leader>ms  :call PerlOpenModule(2)<CR>
    autocmd FileType perl nnoremap <buffer> <leader>mv  :call PerlOpenModule(3)<CR>
    autocmd FileType perl nnoremap <buffer> <leader>mm  :call PerlOpenModule(4)<CR>
    autocmd FileType perl nnoremap <buffer> <leader>mp  :call PerlOpenModule(5)<CR>

    autocmd FileType perl nnoremap <buffer> <silent> <F1> m`:%!perltidy<CR>g``
    autocmd FileType perl vnoremap <buffer> <silent> <F1> :%!perltidy<CR>


    autocmd FileType perl nnoremap gci :call CommitPerlFiles()<CR>

    autocmd FileType perl nnoremap <buffer> <leader>ps 0f$lviw"hyouse v5.10; say "<C-r>h: $<C-r>h";<ESC>
    autocmd FileType perl nnoremap <buffer> <leader>pd 0f$lviw"hyouse v5.10; use Data::Dumper; local $Data::Dumper::Sortkeys = 1; local $Data::Dumper::Maxdepth = 2;<CR>say "<C-r>h: ".Dumper($<C-r>h);<ESC>
augroup END
" }}}
" vim {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd FileType vim setlocal foldlevel=0
    autocmd FileType vim setlocal expandtab

    autocmd FileType vim noremap <buffer> <leader>ss  :w<CR>:source %<CR>:e <CR>
    autocmd FileType vim noremap <buffer> <leader>rr  :source %<CR>
augroup END
" }}}
" CursorLine {{{
augroup CursorLine
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END
" }}}
" TypeScript {{{
augroup TypeScript
    autocmd!

    autocmd FileType typescript,typescriptreact setlocal shiftwidth=2
    autocmd FileType typescript,typescriptreact setlocal tabstop=2

    autocmd FileType typescript,typescriptreact setlocal formatprg=prettier\ --parser\ typescript

    autocmd FileType typescript,typescriptreact nnoremap <buffer> <leader>dd <ESC>aconsole.log("\n\n========DAVS");<cr>console.log()<LEFT>
    autocmd FileType typescript,typescriptreact nnoremap <buffer> <leader>df <ESC>aif(typeof window === 'undefined') {<CR>import('fs').then((fs) => {<CR>fs.writeFileSync(`/clean_daily/${XyXyXy}.json`, JSON.stringify(XyXyXy))<CR>// process.exit(1)<CR><BS><BS><BS>})<CR>}<UP><UP><UP><ESC>/XyXyXy<CR>cw

    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup END
" }}}
" sh {{{
augroup sh
    autocmd!
    autocmd FileType sh nnoremap <buffer> <leader>rr :!bash %<CR>
augroup END
" }}}
" yaml {{{
augroup yaml
    autocmd!
    autocmd FileType yaml setlocal expandtab
    autocmd FileType yaml setlocal autoindent
    autocmd FileType yaml setlocal tabstop=2
    autocmd FileType yaml setlocal shiftwidth=2
augroup END
" }}}
" jinja {{{
augroup jinja
    autocmd!
    autocmd FileType jinja setlocal expandtab
    autocmd FileType jinja setlocal autoindent
    autocmd FileType jinja setlocal tabstop=2
    autocmd FileType jinja setlocal shiftwidth=2
augroup END
" }}}
" vimrc {{{
noremap <leader>se :tabnew $MYVIMRC<CR>
noremap <leader>ss :source $MYVIMRC<CR>
noremap <leader>sl :execute getline(".")<CR>
" }}}
" }}}
